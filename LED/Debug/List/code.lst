
AVRASM ver. 2.1.30  C:\Users\dainhan\Desktop\LED\Debug\List\code.asm Wed May 07 11:23:34 2025

C:\Users\dainhan\Desktop\LED\Debug\List\code.asm(1090): warning: Register r3 already defined by the .DEF directive
C:\Users\dainhan\Desktop\LED\Debug\List\code.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Users\dainhan\Desktop\LED\Debug\List\code.asm(1092): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R3
                 	.DEF _counter_msb=R4
                 	.DEF _last_face=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _DICE_FACES:
000034 0108
000035 0509
000036 070d      	.DB  0x8,0x1,0x9,0x5,0xD,0x7
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000037 0000
000038 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000039 0004      	.DW  0x04
00003a 0003      	.DW  0x03
00003b 006e      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00003c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bff5      	OUT  MCUCR,R31
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e0a0      	LDI  R26,LOW(__SRAM_START)
00004c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00004d 93ed      	ST   X+,R30
00004e 9701      	SBIW R24,1
00004f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000050 e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000051 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000052 9185      	LPM  R24,Z+
000053 9195      	LPM  R25,Z+
000054 9700      	SBIW R24,0
000055 f061      	BREQ __GLOBAL_INI_END
000056 91a5      	LPM  R26,Z+
000057 91b5      	LPM  R27,Z+
000058 9005      	LPM  R0,Z+
000059 9015      	LPM  R1,Z+
00005a 01bf      	MOVW R22,R30
00005b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005c 9005      	LPM  R0,Z+
00005d 920d      	ST   X+,R0
00005e 9701      	SBIW R24,1
00005f f7e1      	BRNE __GLOBAL_INI_LOOP
000060 01fb      	MOVW R30,R22
000061 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000062 e0e0      	LDI  R30,__GPIOR0_INIT
000063 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000064 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000065 bfed      	OUT  SPL,R30
000066 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000067 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000068 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000069 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006a 940c 0134 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Define CPU frequency (8 MHz, as per build configuration)
                 ;#define F_CPU 8000000UL
                 ;
                 ;// Pin definitions for LEDs, button, and buzzer (ATmega328P registers)
                 ;#define GROUP_1_PIN 0  // PC0 (Arduino pin A0)
                 ;#define GROUP_2_PIN 1  // PC1 (Arduino pin A1)
                 ;#define GROUP_3_PIN 2  // PC2 (Arduino pin A2)
                 ;#define LED_4_PIN   3  // PC3 (Arduino pin A3)
                 ;#define RND_BTN     1  // PB1 (with external pull-up)
                 ;// Alternative: Use PC6 (requires RSTDISBL fuse)
                 ;// #define RND_BTN     6  // PC6 (with external pull-up, requires RSTDISBL fuse)
                 ;#define BUZZER      0  // PB0 (Arduino pin 8)
                 ;
                 ;// Timing constants
                 ;#define ROLL_STEPS    10    // Number of steps in the rolling phase
                 ;#define BLINK_DELAY   500   // ms (time per step during rolling)
                 ;#define DISPLAY_TIME  1500  // ms (time to display final face)
                 ;#define DEBOUNCE_TIME 50    // ms
                 ;
                 ;// Dice faces (bit patterns for LEDs, adjusted for correct pin mapping)
                 ;const unsigned char DICE_FACES[6] = {
                 ;    (1 << LED_4_PIN),                    // Face 1: LED_4 (PC3)
                 ;    (1 << GROUP_1_PIN),                  // Face 2: GROUP_1 (PC0)
                 ;    (1 << GROUP_1_PIN) | (1 << LED_4_PIN), // Face 3: GROUP_1 (PC0) + LED_4 (PC3)
                 ;    (1 << GROUP_1_PIN) | (1 << GROUP_3_PIN), // Face 4: GROUP_1 (PC0) + GROUP_3 (PC2)
                 ;    (1 << GROUP_1_PIN) | (1 << GROUP_3_PIN) | (1 << LED_4_PIN), // Face 5: GROUP_1 (PC0) + GROUP_3 (PC2) + LED_4 (PC3)
                 ;    (1 << GROUP_1_PIN) | (1 << GROUP_2_PIN) | (1 << GROUP_3_PIN) // Face 6: GROUP_1 (PC0) + GROUP_2 (PC1) + GROUP_3 (PC2 ...
                 ;};
                 ;
                 ;unsigned int counter = 0; // Free-running counter for random seed
                 ;unsigned char last_face = 0; // Track the last displayed face
                 ;
                 ;// Simple random number generator (using a seed)
                 ;unsigned char simple_rand(unsigned int seed) {
                 ; 0000 0025 unsigned char simple_rand(unsigned int seed) {
                 
                 	.CSEG
                 _simple_rand:
                 ; .FSTART _simple_rand
                 ; 0000 0026     // Linear congruential generator with modified parameters for better variation
                 ; 0000 0027     unsigned int next = (seed * 251 + 179) % 256; // Adjusted parameters for better randomness
                 ; 0000 0028     return (next % 6); // Return 0-5 for 6 faces
00006c 93ba      	ST   -Y,R27
00006d 93aa      	ST   -Y,R26
00006e 931a      	ST   -Y,R17
00006f 930a      	ST   -Y,R16
                 ;	seed -> Y+2
                 ;	next -> R16,R17
000070 81aa      	LDD  R26,Y+2
000071 81bb      	LDD  R27,Y+2+1
000072 efeb      	LDI  R30,LOW(251)
000073 940e 01af 	CALL __MULB1W2U
000075 54ed      	SUBI R30,LOW(-179)
000076 4fff      	SBCI R31,HIGH(-179)
000077 70f0      	ANDI R31,HIGH(0xFF)
000078 018f      	MOVW R16,R30
000079 01d8      	MOVW R26,R16
00007a e0e6      	LDI  R30,LOW(6)
00007b e0f0      	LDI  R31,HIGH(6)
00007c 940e 01cd 	CALL __MODW21U
00007e c016      	RJMP _0x2000003
                 ; 0000 0029 }
                 ; .FEND
                 ;
                 ;// Generate a random face, ensuring it's different from the last face
                 ;unsigned char get_random_face(unsigned int seed) {
                 ; 0000 002C unsigned char get_random_face(unsigned int seed) {
                 _get_random_face:
                 ; .FSTART _get_random_face
                 ; 0000 002D     unsigned char face;
                 ; 0000 002E     unsigned char attempts = 0;
                 ; 0000 002F     do {
00007f 93ba      	ST   -Y,R27
000080 93aa      	ST   -Y,R26
000081 931a      	ST   -Y,R17
000082 930a      	ST   -Y,R16
                 ;	seed -> Y+2
                 ;	face -> R17
                 ;	attempts -> R16
000083 e000      	LDI  R16,0
                 _0x4:
                 ; 0000 0030         face = simple_rand(seed + attempts) + 1; // Face 1-6
000084 2fe0      	MOV  R30,R16
000085 e0f0      	LDI  R31,0
000086 81aa      	LDD  R26,Y+2
000087 81bb      	LDD  R27,Y+2+1
000088 0fae      	ADD  R26,R30
000089 1fbf      	ADC  R27,R31
00008a dfe1      	RCALL _simple_rand
00008b 5fef      	SUBI R30,-LOW(1)
00008c 2f1e      	MOV  R17,R30
                 ; 0000 0031         attempts++;
00008d 5f0f      	SUBI R16,-1
                 ; 0000 0032     } while (face == last_face && attempts < 10); // Avoid repeating the last face
00008e 1661      	CP   R6,R17
00008f f411      	BRNE _0x6
000090 300a      	CPI  R16,10
000091 f008      	BRLO _0x7
                 _0x6:
000092 c001      	RJMP _0x5
                 _0x7:
000093 cff0      	RJMP _0x4
                 _0x5:
                 ; 0000 0033     return face;
000094 2fe1      	MOV  R30,R17
                 _0x2000003:
000095 8119      	LDD  R17,Y+1
000096 8108      	LDD  R16,Y+0
000097 9624      	ADIW R28,4
000098 9508      	RET
                 ; 0000 0034 }
                 ; .FEND
                 ;
                 ;void init_io(void) {
                 ; 0000 0036 void init_io(void) {
                 _init_io:
                 ; .FSTART _init_io
                 ; 0000 0037     // Set PC0, PC1, PC2, PC3 as outputs for LEDs
                 ; 0000 0038     DDRC.0 = 1;
000099 9a38      	SBI  0x7,0
                 ; 0000 0039     DDRC.1 = 1;
00009a 9a39      	SBI  0x7,1
                 ; 0000 003A     DDRC.2 = 1;
00009b 9a3a      	SBI  0x7,2
                 ; 0000 003B     DDRC.3 = 1;
00009c 9a3b      	SBI  0x7,3
                 ; 0000 003C 
                 ; 0000 003D     // Set PB1 as input for button (external pull-up, so no internal pull-up needed)
                 ; 0000 003E     DDRB.1 = 0;
00009d 9821      	CBI  0x4,1
                 ; 0000 003F     PORTB.1 = 0; // No internal pull-up (relying on external pull-up)
00009e 9829      	CBI  0x5,1
                 ; 0000 0040 
                 ; 0000 0041     // Alternative: Use PC6 (requires RSTDISBL fuse)
                 ; 0000 0042     // DDRC.6 = 0;
                 ; 0000 0043     // PORTC.6 = 0;
                 ; 0000 0044 
                 ; 0000 0045     // Set PB0 as output for buzzer
                 ; 0000 0046     DDRB.0 = 1;
00009f 9a20      	SBI  0x4,0
                 ; 0000 0047 
                 ; 0000 0048     // Initialize outputs to OFF
                 ; 0000 0049     PORTC.0 = 0;
0000a0 9840      	CBI  0x8,0
                 ; 0000 004A     PORTC.1 = 0;
0000a1 9841      	CBI  0x8,1
                 ; 0000 004B     PORTC.2 = 0;
0000a2 9842      	CBI  0x8,2
                 ; 0000 004C     PORTC.3 = 0;
0000a3 9843      	CBI  0x8,3
                 ; 0000 004D     PORTB.0 = 0;
0000a4 c056      	RJMP _0x2000002
                 ; 0000 004E }
                 ; .FEND
                 ;
                 ;void clear_leds(void) {
                 ; 0000 0050 void clear_leds(void) {
                 _clear_leds:
                 ; .FSTART _clear_leds
                 ; 0000 0051     PORTC.0 = 0;
0000a5 9840      	CBI  0x8,0
                 ; 0000 0052     PORTC.1 = 0;
0000a6 9841      	CBI  0x8,1
                 ; 0000 0053     PORTC.2 = 0;
0000a7 9842      	CBI  0x8,2
                 ; 0000 0054     PORTC.3 = 0;
0000a8 9843      	CBI  0x8,3
                 ; 0000 0055 }
0000a9 9508      	RET
                 ; .FEND
                 ;
                 ;void set_face(unsigned char face_idx) {
                 ; 0000 0057 void set_face(unsigned char face_idx) {
                 _set_face:
                 ; .FSTART _set_face
                 ; 0000 0058     unsigned char pattern = DICE_FACES[face_idx];
                 ; 0000 0059     PORTC.0 = (pattern & (1 << GROUP_1_PIN)) ? 1 : 0;
0000aa 93aa      	ST   -Y,R26
0000ab 931a      	ST   -Y,R17
                 ;	face_idx -> Y+1
                 ;	pattern -> R17
0000ac 81e9      	LDD  R30,Y+1
0000ad e0f0      	LDI  R31,0
0000ae 59e8      	SUBI R30,LOW(-_DICE_FACES*2)
0000af 4fff      	SBCI R31,HIGH(-_DICE_FACES*2)
0000b0 91e4      	LPM  R30,Z
0000b1 2f1e      	MOV  R17,R30
0000b2 ff10      	SBRS R17,0
0000b3 c002      	RJMP _0x28
0000b4 e0e1      	LDI  R30,LOW(1)
0000b5 c001      	RJMP _0x29
                 _0x28:
0000b6 e0e0      	LDI  R30,LOW(0)
                 _0x29:
0000b7 30e0      	CPI  R30,0
0000b8 f411      	BRNE _0x2B
0000b9 9840      	CBI  0x8,0
0000ba c001      	RJMP _0x2C
                 _0x2B:
0000bb 9a40      	SBI  0x8,0
                 _0x2C:
                 ; 0000 005A     PORTC.1 = (pattern & (1 << GROUP_2_PIN)) ? 1 : 0;
0000bc ff11      	SBRS R17,1
0000bd c002      	RJMP _0x2D
0000be e0e1      	LDI  R30,LOW(1)
0000bf c001      	RJMP _0x2E
                 _0x2D:
0000c0 e0e0      	LDI  R30,LOW(0)
                 _0x2E:
0000c1 30e0      	CPI  R30,0
0000c2 f411      	BRNE _0x30
0000c3 9841      	CBI  0x8,1
0000c4 c001      	RJMP _0x31
                 _0x30:
0000c5 9a41      	SBI  0x8,1
                 _0x31:
                 ; 0000 005B     PORTC.2 = (pattern & (1 << GROUP_3_PIN)) ? 1 : 0;
0000c6 ff12      	SBRS R17,2
0000c7 c002      	RJMP _0x32
0000c8 e0e1      	LDI  R30,LOW(1)
0000c9 c001      	RJMP _0x33
                 _0x32:
0000ca e0e0      	LDI  R30,LOW(0)
                 _0x33:
0000cb 30e0      	CPI  R30,0
0000cc f411      	BRNE _0x35
0000cd 9842      	CBI  0x8,2
0000ce c001      	RJMP _0x36
                 _0x35:
0000cf 9a42      	SBI  0x8,2
                 _0x36:
                 ; 0000 005C     PORTC.3 = (pattern & (1 << LED_4_PIN)) ? 1 : 0;
0000d0 ff13      	SBRS R17,3
0000d1 c002      	RJMP _0x37
0000d2 e0e1      	LDI  R30,LOW(1)
0000d3 c001      	RJMP _0x38
                 _0x37:
0000d4 e0e0      	LDI  R30,LOW(0)
                 _0x38:
0000d5 30e0      	CPI  R30,0
0000d6 f411      	BRNE _0x3A
0000d7 9843      	CBI  0x8,3
0000d8 c001      	RJMP _0x3B
                 _0x3A:
0000d9 9a43      	SBI  0x8,3
                 _0x3B:
                 ; 0000 005D }
0000da 8118      	LDD  R17,Y+0
0000db 9622      	ADIW R28,2
0000dc 9508      	RET
                 ; .FEND
                 ;
                 ;void funny_beep_pattern(void) {
                 ; 0000 005F void funny_beep_pattern(void) {
                 _funny_beep_pattern:
                 ; .FSTART _funny_beep_pattern
                 ; 0000 0060     unsigned char i;
                 ; 0000 0061     for (i = 0; i < 3; i++) {
0000dd 931a      	ST   -Y,R17
                 ;	i -> R17
0000de e010      	LDI  R17,LOW(0)
                 _0x3D:
0000df 3013      	CPI  R17,3
0000e0 f498      	BRSH _0x3E
                 ; 0000 0062         PORTB.0 = 1; // Buzzer ON
0000e1 9a28      	SBI  0x5,0
                 ; 0000 0063         delay_ms(10 * (3 + i * 2)); // 30, 50, 70 ms
0000e2 e0e2      	LDI  R30,LOW(2)
0000e3 9fe1      	MUL  R30,R17
0000e4 01f0      	MOVW R30,R0
0000e5 9633      	ADIW R30,3
0000e6 e0aa      	LDI  R26,LOW(10)
0000e7 e0b0      	LDI  R27,HIGH(10)
0000e8 940e 01b5 	CALL __MULW12
0000ea 01df      	MOVW R26,R30
0000eb 940e 018d 	CALL _delay_ms
                 ; 0000 0064         PORTB.0 = 0; // Buzzer OFF
0000ed 9828      	CBI  0x5,0
                 ; 0000 0065         delay_ms(50); // 50ms pause
0000ee e3a2      	LDI  R26,LOW(50)
0000ef e0b0      	LDI  R27,0
0000f0 940e 018d 	CALL _delay_ms
                 ; 0000 0066     }
0000f2 5f1f      	SUBI R17,-1
0000f3 cfeb      	RJMP _0x3D
                 _0x3E:
                 ; 0000 0067 }
0000f4 9119      	LD   R17,Y+
0000f5 9508      	RET
                 ; .FEND
                 ;
                 ;void short_beep(void) {
                 ; 0000 0069 void short_beep(void) {
                 _short_beep:
                 ; .FSTART _short_beep
                 ; 0000 006A     PORTB.0 = 1; // Buzzer ON
0000f6 9a28      	SBI  0x5,0
                 ; 0000 006B     delay_ms(100); // Short 100ms beep
0000f7 e6a4      	LDI  R26,LOW(100)
0000f8 e0b0      	LDI  R27,0
0000f9 940e 018d 	CALL _delay_ms
                 ; 0000 006C     PORTB.0 = 0; // Buzzer OFF
                 _0x2000002:
0000fb 9828      	CBI  0x5,0
                 ; 0000 006D }
0000fc 9508      	RET
                 ; .FEND
                 ;
                 ;void rolling_effect(unsigned int seed) {
                 ; 0000 006F void rolling_effect(unsigned int seed) {
                 _rolling_effect:
                 ; .FSTART _rolling_effect
                 ; 0000 0070     unsigned int steps = ROLL_STEPS;
                 ; 0000 0071     unsigned int i;
                 ; 0000 0072     unsigned int local_seed = seed;
                 ; 0000 0073     for (i = 0; i < steps; i++) {
0000fd 93ba      	ST   -Y,R27
0000fe 93aa      	ST   -Y,R26
0000ff 940e 01de 	CALL __SAVELOCR6
                 ;	seed -> Y+6
                 ;	steps -> R16,R17
                 ;	i -> R18,R19
                 ;	local_seed -> R20,R21
                +
000101 e00a     +LDI R16 , LOW ( 10 )
000102 e010     +LDI R17 , HIGH ( 10 )
                 	__GETWRN 16,17,10
                +
000103 814e     +LDD R20 , Y + 6
000104 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
                +
000105 e020     +LDI R18 , LOW ( 0 )
000106 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x48:
                +
000107 1720     +CP R18 , R16
000108 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
000109 f4c0      	BRSH _0x49
                 ; 0000 0074         unsigned char temp_face = simple_rand(local_seed);
                 ; 0000 0075         set_face(temp_face);
00010a 9721      	SBIW R28,1
                 ;	seed -> Y+7
                 ;	temp_face -> Y+0
00010b 01da      	MOVW R26,R20
00010c df5f      	RCALL _simple_rand
00010d 83e8      	ST   Y,R30
00010e 81a8      	LD   R26,Y
00010f df9a      	RCALL _set_face
                 ; 0000 0076         delay_ms(BLINK_DELAY);
000110 efa4      	LDI  R26,LOW(500)
000111 e0b1      	LDI  R27,HIGH(500)
000112 940e 018d 	CALL _delay_ms
                 ; 0000 0077         clear_leds();
000114 df90      	RCALL _clear_leds
                 ; 0000 0078         local_seed = (local_seed * 251 + 179) % 256; // Update seed for next iteration
                +
000115 efab     +LDI R26 , 251
000116 9fa4     +MUL R26 , R20
000117 01f0     +MOVW R30 , R0
000118 9fa5     +MUL R26 , R21
000119 0df0     +ADD R31 , R0
                 	__MULBNWRU 20,21,251
00011a 54ed      	SUBI R30,LOW(-179)
00011b 4fff      	SBCI R31,HIGH(-179)
00011c 70f0      	ANDI R31,HIGH(0xFF)
00011d 01af      	MOVW R20,R30
                 ; 0000 0079     }
00011e 9621      	ADIW R28,1
                +
00011f 5f2f     +SUBI R18 , LOW ( - 1 )
000120 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000121 cfe5      	RJMP _0x48
                 _0x49:
                 ; 0000 007A }
000122 940e 01e5 	CALL __LOADLOCR6
000124 9628      	ADIW R28,8
000125 9508      	RET
                 ; .FEND
                 ;
                 ;void show_face(unsigned char face) {
                 ; 0000 007C void show_face(unsigned char face) {
                 _show_face:
                 ; .FSTART _show_face
                 ; 0000 007D     if (face < 1 || face > 6) return;
000126 93aa      	ST   -Y,R26
                 ;	face -> Y+0
000127 81a8      	LD   R26,Y
000128 30a1      	CPI  R26,LOW(0x1)
000129 f010      	BRLO _0x4B
00012a 30a7      	CPI  R26,LOW(0x7)
00012b f008      	BRLO _0x4A
                 _0x4B:
00012c c005      	RJMP _0x2000001
                 ; 0000 007E     set_face(face - 1);
                 _0x4A:
00012d 81a8      	LD   R26,Y
00012e 50a1      	SUBI R26,LOW(1)
00012f df7a      	RCALL _set_face
                 ; 0000 007F     funny_beep_pattern(); // Play buzzer sound when final result is displayed
000130 dfac      	RCALL _funny_beep_pattern
                 ; 0000 0080     last_face = face; // Store the last displayed face
000131 8068      	LDD  R6,Y+0
                 ; 0000 0081     // Keep displaying until the next button press (handled in main loop)
                 ; 0000 0082 }
                 _0x2000001:
000132 9621      	ADIW R28,1
000133 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 0084 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0085     init_io();
000134 df64      	RCALL _init_io
                 ; 0000 0086 
                 ; 0000 0087     while (1) {
                 _0x4D:
                 ; 0000 0088         // Declare variables at the start of the block
                 ; 0000 0089         unsigned int roll_seed;
                 ; 0000 008A         unsigned char final_face;
                 ; 0000 008B         unsigned int seed_modifier = 0;
                 ; 0000 008C 
                 ; 0000 008D         // Increment counter continuously to provide a varying seed
                 ; 0000 008E         counter++;
000135 9725      	SBIW R28,5
000136 e0e0      	LDI  R30,LOW(0)
000137 83e8      	ST   Y,R30
000138 83e9      	STD  Y+1,R30
                 ;	roll_seed -> Y+3
                 ;	final_face -> Y+2
                 ;	seed_modifier -> Y+0
000139 d043      	RCALL SUBOPT_0x0
                 ; 0000 008F         if (counter > 65535) counter = 0;
00013a f410      	BRSH _0x50
00013b 2433      	CLR  R3
00013c 2444      	CLR  R4
                 ; 0000 0090 
                 ; 0000 0091         // Accumulate seed_modifier while waiting for button press
                 ; 0000 0092         seed_modifier = (seed_modifier + counter) ^ (counter << 3); // Non-linear combination
                 _0x50:
00013d d048      	RCALL SUBOPT_0x1
00013e 940e 019b 	CALL __LSLW3
000140 27ea      	EOR  R30,R26
000141 27fb      	EOR  R31,R27
000142 83e8      	ST   Y,R30
000143 83f9      	STD  Y+1,R31
                 ; 0000 0093 
                 ; 0000 0094         // Wait for button press (PB1 goes LOW due to pull-up)
                 ; 0000 0095         // Alternative: Use PINC.6 if using PC6 with RSTDISBL fuse
                 ; 0000 0096         if (!PINB.1) {
000144 9919      	SBIC 0x3,1
000145 c034      	RJMP _0x51
                 ; 0000 0097             // Debounce: Wait and confirm button state
                 ; 0000 0098             delay_ms(DEBOUNCE_TIME);
000146 e3a2      	LDI  R26,LOW(50)
000147 e0b0      	LDI  R27,0
000148 940e 018d 	CALL _delay_ms
                 ; 0000 0099             if (!PINB.1) {
00014a 9919      	SBIC 0x3,1
00014b c02e      	RJMP _0x52
                 ; 0000 009A                 // Short beep to confirm button press
                 ; 0000 009B                 short_beep();
00014c dfa9      	RCALL _short_beep
                 ; 0000 009C 
                 ; 0000 009D                 // Accumulate counter increments during button press to vary the seed
                 ; 0000 009E                 while (!PINB.1) {
                 _0x53:
00014d 9919      	SBIC 0x3,1
00014e c010      	RJMP _0x55
                 ; 0000 009F                     counter++;
00014f d02d      	RCALL SUBOPT_0x0
                 ; 0000 00A0                     if (counter > 65535) counter = 0;
000150 f410      	BRSH _0x56
000151 2433      	CLR  R3
000152 2444      	CLR  R4
                 ; 0000 00A1                     seed_modifier = (seed_modifier + counter) ^ (counter >> 2); // Further vary the seed
                 _0x56:
000153 d032      	RCALL SUBOPT_0x1
000154 940e 01a2 	CALL __LSRW2
000156 27ea      	EOR  R30,R26
000157 27fb      	EOR  R31,R27
000158 83e8      	ST   Y,R30
000159 83f9      	STD  Y+1,R31
                 ; 0000 00A2                     delay_ms(10);
00015a e0aa      	LDI  R26,LOW(10)
00015b e0b0      	LDI  R27,0
00015c 940e 018d 	CALL _delay_ms
                 ; 0000 00A3                 }
00015e cfee      	RJMP _0x53
                 _0x55:
                 ; 0000 00A4                 roll_seed = (counter ^ seed_modifier) + (seed_modifier >> 1); // Combine for better variation
00015f 81a8      	LD   R26,Y
000160 81b9      	LDD  R27,Y+1
000161 25a3      	EOR  R26,R3
000162 25b4      	EOR  R27,R4
000163 81e8      	LD   R30,Y
000164 81f9      	LDD  R31,Y+1
000165 95f6      	LSR  R31
000166 95e7      	ROR  R30
000167 0fea      	ADD  R30,R26
000168 1ffb      	ADC  R31,R27
000169 83eb      	STD  Y+3,R30
00016a 83fc      	STD  Y+3+1,R31
                 ; 0000 00A5                 rolling_effect(roll_seed);
00016b 81ab      	LDD  R26,Y+3
00016c 81bc      	LDD  R27,Y+3+1
00016d df8f      	RCALL _rolling_effect
                 ; 0000 00A6                 final_face = get_random_face(roll_seed + (seed_modifier << 2));
00016e 81e8      	LD   R30,Y
00016f 81f9      	LDD  R31,Y+1
000170 940e 019d 	CALL __LSLW2
000172 81ab      	LDD  R26,Y+3
000173 81bc      	LDD  R27,Y+3+1
000174 0fae      	ADD  R26,R30
000175 1fbf      	ADC  R27,R31
000176 df08      	RCALL _get_random_face
000177 83ea      	STD  Y+2,R30
                 ; 0000 00A7                 show_face(final_face);
000178 81aa      	LDD  R26,Y+2
000179 dfac      	RCALL _show_face
                 ; 0000 00A8             }
                 ; 0000 00A9         }
                 _0x52:
                 ; 0000 00AA     }
                 _0x51:
00017a 9625      	ADIW R28,5
00017b cfb9      	RJMP _0x4D
                 ; 0000 00AB }
                 _0x57:
00017c cfff      	RJMP _0x57
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00017d e0e1      	LDI  R30,LOW(1)
00017e e0f0      	LDI  R31,HIGH(1)
                +
00017f 0e3e     +ADD R3 , R30
000180 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
000181 efef      	LDI  R30,LOW(65535)
000182 efff      	LDI  R31,HIGH(65535)
000183 15e3      	CP   R30,R3
000184 05f4      	CPC  R31,R4
000185 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
                +
000186 2de3     +MOV R30 , R3
000187 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
000188 81a8      	LD   R26,Y
000189 81b9      	LDD  R27,Y+1
00018a 0fae      	ADD  R26,R30
00018b 1fbf      	ADC  R27,R31
00018c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00018d 9610      	adiw r26,0
00018e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00018f ed80     +LDI R24 , LOW ( 0x7D0 )
000190 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000191 9701     +SBIW R24 , 1
000192 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000193 95a8      	wdr
000194 9711      	sbiw r26,1
000195 f7c9      	brne __delay_ms0
                 __delay_ms1:
000196 9508      	ret
                 
                 __ANEGW1:
000197 95f1      	NEG  R31
000198 95e1      	NEG  R30
000199 40f0      	SBCI R31,0
00019a 9508      	RET
                 
                 __LSLW3:
00019b 0fee      	LSL  R30
00019c 1fff      	ROL  R31
                 __LSLW2:
00019d 0fee      	LSL  R30
00019e 1fff      	ROL  R31
00019f 0fee      	LSL  R30
0001a0 1fff      	ROL  R31
0001a1 9508      	RET
                 
                 __LSRW2:
0001a2 95f6      	LSR  R31
0001a3 95e7      	ROR  R30
0001a4 95f6      	LSR  R31
0001a5 95e7      	ROR  R30
0001a6 9508      	RET
                 
                 __MULW12U:
0001a7 9ffa      	MUL  R31,R26
0001a8 2df0      	MOV  R31,R0
0001a9 9feb      	MUL  R30,R27
0001aa 0df0      	ADD  R31,R0
0001ab 9fea      	MUL  R30,R26
0001ac 2de0      	MOV  R30,R0
0001ad 0df1      	ADD  R31,R1
0001ae 9508      	RET
                 
                 __MULB1W2U:
0001af 2f6e      	MOV  R22,R30
0001b0 9f6a      	MUL  R22,R26
0001b1 01f0      	MOVW R30,R0
0001b2 9f6b      	MUL  R22,R27
0001b3 0df0      	ADD  R31,R0
0001b4 9508      	RET
                 
                 __MULW12:
0001b5 d01a      	RCALL __CHKSIGNW
0001b6 dff0      	RCALL __MULW12U
0001b7 f40e      	BRTC __MULW121
0001b8 dfde      	RCALL __ANEGW1
                 __MULW121:
0001b9 9508      	RET
                 
                 __DIVW21U:
0001ba 2400      	CLR  R0
0001bb 2411      	CLR  R1
0001bc e190      	LDI  R25,16
                 __DIVW21U1:
0001bd 0faa      	LSL  R26
0001be 1fbb      	ROL  R27
0001bf 1c00      	ROL  R0
0001c0 1c11      	ROL  R1
0001c1 1a0e      	SUB  R0,R30
0001c2 0a1f      	SBC  R1,R31
0001c3 f418      	BRCC __DIVW21U2
0001c4 0e0e      	ADD  R0,R30
0001c5 1e1f      	ADC  R1,R31
0001c6 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001c7 60a1      	SBR  R26,1
                 __DIVW21U3:
0001c8 959a      	DEC  R25
0001c9 f799      	BRNE __DIVW21U1
0001ca 01fd      	MOVW R30,R26
0001cb 01d0      	MOVW R26,R0
0001cc 9508      	RET
                 
                 __MODW21U:
0001cd dfec      	RCALL __DIVW21U
0001ce 01fd      	MOVW R30,R26
0001cf 9508      	RET
                 
                 __CHKSIGNW:
0001d0 94e8      	CLT
0001d1 fff7      	SBRS R31,7
0001d2 c002      	RJMP __CHKSW1
0001d3 dfc3      	RCALL __ANEGW1
0001d4 9468      	SET
                 __CHKSW1:
0001d5 ffb7      	SBRS R27,7
0001d6 c006      	RJMP __CHKSW2
0001d7 95a0      	COM  R26
0001d8 95b0      	COM  R27
0001d9 9611      	ADIW R26,1
0001da f800      	BLD  R0,0
0001db 9403      	INC  R0
0001dc fa00      	BST  R0,0
                 __CHKSW2:
0001dd 9508      	RET
                 
                 __SAVELOCR6:
0001de 935a      	ST   -Y,R21
                 __SAVELOCR5:
0001df 934a      	ST   -Y,R20
                 __SAVELOCR4:
0001e0 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001e1 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001e2 931a      	ST   -Y,R17
0001e3 930a      	ST   -Y,R16
0001e4 9508      	RET
                 
                 __LOADLOCR6:
0001e5 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0001e6 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0001e7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001e8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001e9 8119      	LDD  R17,Y+1
0001ea 8108      	LD   R16,Y
0001eb 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  20 r1 :   6 r2 :   0 r3 :   6 r4 :   6 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  13 r17:  23 r18:   5 r19:   5 r20:   6 r21:   4 r22:   5 r23:   0 
r24:   9 r25:   5 r26:  52 r27:  30 r28:   9 r29:   1 r30:  84 r31:  44 
x  :   3 y  :  64 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :  10 
adiw  :   9 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  11 brpl  :   0 brsh  :   4 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  14 
cbi   :  16 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   2 cpi   :   8 cpse  :   0 dec   :   2 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  27 ld    :   9 ldd   :  25 ldi   :  55 
lds   :   0 lpm   :   9 lsl   :   4 lsr   :   3 mov   :   9 movw  :  14 
mul   :   8 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :   6 pop   :   0 push  :   0 rcall :  20 ret   :  21 
reti  :   0 rjmp  :  29 rol   :   6 ror   :   3 sbc   :   1 sbci  :   5 
sbi   :  11 sbic  :   3 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   6 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   6 sts   :   0 sub   :   1 subi  :   8 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003d8    966     18    984   32768   3.0%
[.dseg] 0x000100 0x000300      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
