;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Define CPU frequency (8 MHz, as per build configuration)
;#define F_CPU 8000000UL
;
;// Pin definitions for LEDs, button, and buzzer (ATmega328P registers)
;#define GROUP_1_PIN 0  // PC0 (Arduino pin A0)
;#define GROUP_2_PIN 1  // PC1 (Arduino pin A1)
;#define GROUP_3_PIN 2  // PC2 (Arduino pin A2)
;#define LED_4_PIN   3  // PC3 (Arduino pin A3)
;#define RND_BTN     1  // PB1 (with external pull-up)
;// Alternative: Use PC6 (requires RSTDISBL fuse)
;// #define RND_BTN     6  // PC6 (with external pull-up, requires RSTDISBL fuse)
;#define BUZZER      0  // PB0 (Arduino pin 8)
;
;// Timing constants
;#define ROLL_STEPS    10    // Number of steps in the rolling phase
;#define BLINK_DELAY   500   // ms (time per step during rolling)
;#define DISPLAY_TIME  1500  // ms (time to display final face)
;#define DEBOUNCE_TIME 50    // ms
;
;// Dice faces (bit patterns for LEDs, adjusted for correct pin mapping)
;const unsigned char DICE_FACES[6] = {
;    (1 << LED_4_PIN),                    // Face 1: LED_4 (PC3)
;    (1 << GROUP_1_PIN),                  // Face 2: GROUP_1 (PC0)
;    (1 << GROUP_1_PIN) | (1 << LED_4_PIN), // Face 3: GROUP_1 (PC0) + LED_4 (PC3)
;    (1 << GROUP_1_PIN) | (1 << GROUP_3_PIN), // Face 4: GROUP_1 (PC0) + GROUP_3 (PC2)
;    (1 << GROUP_1_PIN) | (1 << GROUP_3_PIN) | (1 << LED_4_PIN), // Face 5: GROUP_1 (PC0) + GROUP_3 (PC2) + LED_4 (PC3)
;    (1 << GROUP_1_PIN) | (1 << GROUP_2_PIN) | (1 << GROUP_3_PIN) // Face 6: GROUP_1 (PC0) + GROUP_2 (PC1) + GROUP_3 (PC2 ...
;};
;
;unsigned int counter = 0; // Free-running counter for random seed
;unsigned char last_face = 0; // Track the last displayed face
;
;// Simple random number generator (using a seed)
;unsigned char simple_rand(unsigned int seed) {
; 0000 0025 unsigned char simple_rand(unsigned int seed) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026     // Linear congruential generator with modified parameters for better variation
; 0000 0027     unsigned int next = (seed * 251 + 179) % 256; // Adjusted parameters for better randomness
; 0000 0028     return (next % 6); // Return 0-5 for 6 faces
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	seed -> Y+2
;	next -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0029 }
;PCODE: $00000021 VOL: 0
;
;// Generate a random face, ensuring it's different from the last face
;unsigned char get_random_face(unsigned int seed) {
; 0000 002C unsigned char get_random_face(unsigned int seed) {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002D     unsigned char face;
; 0000 002E     unsigned char attempts = 0;
; 0000 002F     do {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;	seed -> Y+2
;	face -> R17
;	attempts -> R16
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0030         face = simple_rand(seed + attempts) + 1; // Face 1-6
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0031         attempts++;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0032     } while (face == last_face && attempts < 10); // Avoid repeating the last face
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0033     return face;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0034 }
;PCODE: $00000047 VOL: 0
;
;void init_io(void) {
; 0000 0036 void init_io(void) {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0037     // Set PC0, PC1, PC2, PC3 as outputs for LEDs
; 0000 0038     DDRC.0 = 1;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0039     DDRC.1 = 1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003A     DDRC.2 = 1;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003B     DDRC.3 = 1;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003C 
; 0000 003D     // Set PB1 as input for button (external pull-up, so no internal pull-up needed)
; 0000 003E     DDRB.1 = 0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003F     PORTB.1 = 0; // No internal pull-up (relying on external pull-up)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0040 
; 0000 0041     // Alternative: Use PC6 (requires RSTDISBL fuse)
; 0000 0042     // DDRC.6 = 0;
; 0000 0043     // PORTC.6 = 0;
; 0000 0044 
; 0000 0045     // Set PB0 as output for buzzer
; 0000 0046     DDRB.0 = 1;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0047 
; 0000 0048     // Initialize outputs to OFF
; 0000 0049     PORTC.0 = 0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004A     PORTC.1 = 0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004B     PORTC.2 = 0;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 004C     PORTC.3 = 0;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 004D     PORTB.0 = 0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 004E }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;void clear_leds(void) {
; 0000 0050 void clear_leds(void) {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0051     PORTC.0 = 0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0052     PORTC.1 = 0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0053     PORTC.2 = 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0054     PORTC.3 = 0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0055 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;void set_face(unsigned char face_idx) {
; 0000 0057 void set_face(unsigned char face_idx) {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0058     unsigned char pattern = DICE_FACES[face_idx];
; 0000 0059     PORTC.0 = (pattern & (1 << GROUP_1_PIN)) ? 1 : 0;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;	face_idx -> Y+1
;	pattern -> R17
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 005A     PORTC.1 = (pattern & (1 << GROUP_2_PIN)) ? 1 : 0;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 005B     PORTC.2 = (pattern & (1 << GROUP_3_PIN)) ? 1 : 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 005C     PORTC.3 = (pattern & (1 << LED_4_PIN)) ? 1 : 0;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 005D }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;
;void funny_beep_pattern(void) {
; 0000 005F void funny_beep_pattern(void) {
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0060     unsigned char i;
; 0000 0061     for (i = 0; i < 3; i++) {
;PCODE: $000000C8 VOL: 0
;	i -> R17
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0062         PORTB.0 = 1; // Buzzer ON
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0063         delay_ms(10 * (3 + i * 2)); // 30, 50, 70 ms
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0064         PORTB.0 = 0; // Buzzer OFF
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0065         delay_ms(50); // 50ms pause
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0066     }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0067 }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;
;void short_beep(void) {
; 0000 0069 void short_beep(void) {
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 006A     PORTB.0 = 1; // Buzzer ON
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 006B     delay_ms(100); // Short 100ms beep
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 006C     PORTB.0 = 0; // Buzzer OFF
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 006D }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;
;void rolling_effect(unsigned int seed) {
; 0000 006F void rolling_effect(unsigned int seed) {
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0070     unsigned int steps = ROLL_STEPS;
; 0000 0071     unsigned int i;
; 0000 0072     unsigned int local_seed = seed;
; 0000 0073     for (i = 0; i < steps; i++) {
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;	seed -> Y+6
;	steps -> R16,R17
;	i -> R18,R19
;	local_seed -> R20,R21
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0074         unsigned char temp_face = simple_rand(local_seed);
; 0000 0075         set_face(temp_face);
;PCODE: $00000104 VOL: 0
;	seed -> Y+7
;	temp_face -> Y+0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0076         delay_ms(BLINK_DELAY);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0077         clear_leds();
;PCODE: $0000010C VOL: 0
; 0000 0078         local_seed = (local_seed * 251 + 179) % 256; // Update seed for next iteration
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0079     }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 007A }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;
;void show_face(unsigned char face) {
; 0000 007C void show_face(unsigned char face) {
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 007D     if (face < 1 || face > 6) return;
;PCODE: $0000011E VOL: 0
;	face -> Y+0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 007E     set_face(face - 1);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 007F     funny_beep_pattern(); // Play buzzer sound when final result is displayed
;PCODE: $0000012D VOL: 0
; 0000 0080     last_face = face; // Store the last displayed face
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0081     // Keep displaying until the next button press (handled in main loop)
; 0000 0082 }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;
;void main(void) {
; 0000 0084 void main(void) {
;PCODE: $00000133 VOL: 0
; 0000 0085     init_io();
;PCODE: $00000134 VOL: 0
; 0000 0086 
; 0000 0087     while (1) {
;PCODE: $00000135 VOL: 0
; 0000 0088         // Declare variables at the start of the block
; 0000 0089         unsigned int roll_seed;
; 0000 008A         unsigned char final_face;
; 0000 008B         unsigned int seed_modifier = 0;
; 0000 008C 
; 0000 008D         // Increment counter continuously to provide a varying seed
; 0000 008E         counter++;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;	roll_seed -> Y+3
;	final_face -> Y+2
;	seed_modifier -> Y+0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 008F         if (counter > 65535) counter = 0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0090 
; 0000 0091         // Accumulate seed_modifier while waiting for button press
; 0000 0092         seed_modifier = (seed_modifier + counter) ^ (counter << 3); // Non-linear combination
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0093 
; 0000 0094         // Wait for button press (PB1 goes LOW due to pull-up)
; 0000 0095         // Alternative: Use PINC.6 if using PC6 with RSTDISBL fuse
; 0000 0096         if (!PINB.1) {
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0097             // Debounce: Wait and confirm button state
; 0000 0098             delay_ms(DEBOUNCE_TIME);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0099             if (!PINB.1) {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 009A                 // Short beep to confirm button press
; 0000 009B                 short_beep();
;PCODE: $00000153 VOL: 0
; 0000 009C 
; 0000 009D                 // Accumulate counter increments during button press to vary the seed
; 0000 009E                 while (!PINB.1) {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 009F                     counter++;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00A0                     if (counter > 65535) counter = 0;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00A1                     seed_modifier = (seed_modifier + counter) ^ (counter >> 2); // Further vary the seed
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00A2                     delay_ms(10);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00A3                 }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00A4                 roll_seed = (counter ^ seed_modifier) + (seed_modifier >> 1); // Combine for better variation
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00A5                 rolling_effect(roll_seed);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00A6                 final_face = get_random_face(roll_seed + (seed_modifier << 2));
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00A7                 show_face(final_face);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00A8             }
; 0000 00A9         }
;PCODE: $0000017C VOL: 0
; 0000 00AA     }
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00AB }
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
